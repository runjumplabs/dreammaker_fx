I"B5<h3 id="using-the-api">Using the API</h3>

<p>There is an ever-growing list of effects and synth objects that can be routed and controlled in very interesting and novel ways.  These building blocks can be routed together and novel ways.  And, some building blocks and control the parameters of other building blocks.</p>

<ul>
  <li><code class="highlighter-rouge">fx_amplitude_mod</code> - Amplitude modulation continuously changes the volume of the audio running through it and can be used to create tremelo effects and more advanced gating effects.</li>
  <li><code class="highlighter-rouge">fx_biquad_filter</code> - A basic audio filter that filters out certain frequency ranges of audio.  This can be configured as a low-pass, high-pass, band-pass filter, etc.  This block can be  used for general EQ, wah pedals, auto-wahs and envelope filters.</li>
  <li><code class="highlighter-rouge">fx_clipper</code> - Provides soft and hard clipping functions that can be used to create a wide variety of distortions.  When combined with the <code class="highlighter-rouge">fx_biquad_filter</code>, a wide range of tones can be realized to recreate the sounds of tube-amps and distortion pedals.</li>
  <li><code class="highlighter-rouge">fx_compressor</code> - A compressor/limiter block that provides dynamic volume control.  This can be used to create a longer <em>sustain</em> effect on guitars and basses.  It can also be used to keep our audio signals within range so we don’t end up with output distortion.</li>
  <li><code class="highlighter-rouge">fx_delay</code> - Used to create delay-based effects like echoes and reverbs.</li>
  <li><code class="highlighter-rouge">fx_envelope_tracker</code> - Tracks the volume of the input signal and can be used to control other effects like <code class="highlighter-rouge">fx_biquad_filter</code> for creating an auto-wah / envelope filter.</li>
  <li><code class="highlighter-rouge">gain</code> - Increases or decreases the volume of the audio signal.</li>
  <li><code class="highlighter-rouge">fx_instr_synth</code> - Basically a guitar/bass synth.  Generates synth tones based on the note that is being played.  Follows string bends too.  This will be vastly enhanced in next version of API to support polyphonic note tracking.</li>
  <li><code class="highlighter-rouge">fx_looper</code> - A looper effect can capture a sample of audio and loop it indefinitely.</li>
  <li><code class="highlighter-rouge">fx_mixer</code> - Provides a variety of mixers to mix multiple effect outputs into a single signal.</li>
  <li><code class="highlighter-rouge">fx_oscillator</code> - Various oscillators that can be used to generate audio or control effects.</li>
  <li><code class="highlighter-rouge">phase shift</code> - A phase shifter connected to an LFO.</li>
  <li><code class="highlighter-rouge">fx_pitch_shift</code> - Adjusts the pitch of the incoming signal.</li>
  <li><code class="highlighter-rouge">fx_ring_mod</code> - This one is bananas.  It basically modulates the incoming signal with a sine wave to create wild harmonics.</li>
  <li><code class="highlighter-rouge">fx_shaper</code> - Basically a synth that generates a wave at the same frequency, one octave below, and two octaves below.  Each of the three synthesized signals has their own output channel so they can either be mixed or sent through different effects.</li>
  <li><code class="highlighter-rouge">fx_slicer</code> - Chops up audio in time domain and sends to differnt channels.  Great for making rhymthmic effects.</li>
  <li><code class="highlighter-rouge">fx_variable_delay</code> - This is a short delay line that is varied in real time.  This is core building block for flanger, chorus, and vibrato effects.</li>
</ul>

<p>There are several other modules in development including reverbs, all-pass filter, automatic loop detector, etc.</p>

<h4 id="special-parameters-and-constants">Special parameters and constants</h4>

<p>Some objects take inputs that aren’t numbers but rather a constant that is chosen from a list.  Below is a list of the constants that may be used when initializing an effect.</p>

<p><code class="highlighter-rouge">BIQUAD_FILTER_TYPE</code>: Types of filters that can be implemented with <code class="highlighter-rouge">fx_biquad_fiter</code></p>
<ul>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_LPF</code> - low-pass filter (cuts out high frequencies)</li>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_HPF</code> - high-pass filter (cuts out low frequencies)</li>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_BPF</code> - band-pass filter (only lets a limited range of frequencies through)</li>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_NOTCH</code> - opposite of band-pass</li>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_PEAKING</code> - don’t worry about it</li>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_L_SHELF</code> - similar to low pass</li>
  <li><code class="highlighter-rouge">BIQUAD_TYPE_H_SHELF</code> - similar to high pass</li>
</ul>

<p><code class="highlighter-rouge">BIQUAD_FILTER_WIDTH</code>: How “wide” a filter is for use with <code class="highlighter-rouge">fx_biquad_fiter</code></p>
<ul>
  <li><code class="highlighter-rouge">FILTER_WIDTH_VERY_NARROW</code> - very narrow indeed</li>
  <li><code class="highlighter-rouge">FILTER_WIDTH_NARROW</code> - like a wah filter</li>
  <li><code class="highlighter-rouge">FILTER_WIDTH_MEDIUM</code> - a bit narrow</li>
  <li><code class="highlighter-rouge">FILTER_WIDTH_WIDE</code> - wide with flat response (q=0.7071)</li>
  <li><code class="highlighter-rouge">FILTER_WIDTH_VERY_WIDE</code> - very wide</li>
</ul>

<p><code class="highlighter-rouge">ENV_TRACKER_TYPE</code>: Type of envelop tracking</p>
<ul>
  <li><code class="highlighter-rouge">ENV_TRACK_PEAKS</code> - haha, there is only one option - rides the peaks like riding the lion</li>
</ul>

<p><code class="highlighter-rouge">EFFECT_TRANSITION_SPEED</code>: How quickly to transition parameters when a parameter is modified (used in several effects)</p>
<ul>
  <li><code class="highlighter-rouge">TRANS_VERY_FAST</code> - rabbit</li>
  <li><code class="highlighter-rouge">TRANS_FAST</code></li>
  <li><code class="highlighter-rouge">TRANS_MED</code></li>
  <li><code class="highlighter-rouge">TRANS_SLOW</code></li>
  <li><code class="highlighter-rouge">TRANS_VERY_SLOW</code> - turtle</li>
</ul>

<p><code class="highlighter-rouge">OSC_TYPES</code>: Types of oscillators (used in several effects)</p>
<ul>
  <li><code class="highlighter-rouge">OSC_SINE</code> - sine wave</li>
  <li><code class="highlighter-rouge">OSC_TRI</code> - triangle wave</li>
  <li><code class="highlighter-rouge">OSC_SQUARE</code> - square wave</li>
  <li><code class="highlighter-rouge">OSC_PULSE</code> - pulse wave</li>
  <li><code class="highlighter-rouge">OSC_RAMP</code> - ramp wave</li>
</ul>

<p><code class="highlighter-rouge">POLY_CLIP_FUNC</code>: Various clipping functions for use with <code class="highlighter-rouge">fx_clipper</code></p>
<ul>
  <li><code class="highlighter-rouge">POLY_SMOOTHSTEP</code> - try it and see if you like it</li>
  <li><code class="highlighter-rouge">POLY_SMOOTHERSTEP</code> - try it and see if you like it</li>
  <li><code class="highlighter-rouge">POLY_SIMPLE_1</code> - try it and see if you like it</li>
  <li><code class="highlighter-rouge">POLY_SIMPLE_2</code> - try it and see if you like it</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Members</th>
      <th>Descriptions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__amplitude__mod"><code class="highlighter-rouge">fx_amplitude_mod</code></a></td>
      <td>Effect: Amplitude modulator for creating tremelo-like effects.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__audio__node"><code class="highlighter-rouge">fx_audio_node</code></a></td>
      <td>Class for effects audio node.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__biquad__filter"><code class="highlighter-rouge">fx_biquad_filter</code></a></td>
      <td>Effect: Biquad filter for implementing various types of filters (low pass, high pass, band pass, etc.)</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__canvas"><code class="highlighter-rouge">fx_canvas</code></a></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__clipper"><code class="highlighter-rouge">fx_clipper</code></a></td>
      <td>Effect: Clipper - provides various types of hard and soft clippers for creating different types of distortions.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__compressor"><code class="highlighter-rouge">fx_compressor</code></a></td>
      <td>Effect: Compressor/Limiter.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__control__node"><code class="highlighter-rouge">fx_control_node</code></a></td>
      <td>Class for effects control node.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__delay"><code class="highlighter-rouge">fx_delay</code></a></td>
      <td>Effect: Delay/echo.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__effect"><code class="highlighter-rouge">fx_effect</code></a></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__envelope__tracker"><code class="highlighter-rouge">fx_envelope_tracker</code></a></td>
      <td>Effect: Envelope tracker.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__gain"><code class="highlighter-rouge">fx_gain</code></a></td>
      <td>Effect: Gain - used to increase or decrease the volume of an audio signal.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__instr__synth"><code class="highlighter-rouge">fx_instr_synth</code></a></td>
      <td>Effect: Instrument synth - your basic guitar/bass synth.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__looper"><code class="highlighter-rouge">fx_looper</code></a></td>
      <td>Effect: Looper - capture and playback loops.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__mixer__2"><code class="highlighter-rouge">fx_mixer_2</code></a></td>
      <td>Utility: 2 channel mixer.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__mixer__3"><code class="highlighter-rouge">fx_mixer_3</code></a></td>
      <td>Utility: 3 channel mixer.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__mixer__4"><code class="highlighter-rouge">fx_mixer_4</code></a></td>
      <td>Utility: 4 channel mixer.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__oscillator"><code class="highlighter-rouge">fx_oscillator</code></a></td>
      <td>Utility: Oscillator that can has both audio and control outputs.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__phase__shifter"><code class="highlighter-rouge">fx_phase_shifter</code></a></td>
      <td>Effect: Phase shifter for creating rich phase shifts.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__pitch__shift"><code class="highlighter-rouge">fx_pitch_shift</code></a></td>
      <td>Effect: Pitch shifter - shifts audio up or down in pitch.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__pot__buddy"><code class="highlighter-rouge">fx_pot_buddy</code></a></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__ring__mod"><code class="highlighter-rouge">fx_ring_mod</code></a></td>
      <td>Effect: Ring modulator - frequency modulates the audio - crazy sounding.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__shaper"><code class="highlighter-rouge">fx_shaper</code></a></td>
      <td>Effect: Slicer - chops up audio in the time domain and pipes to different effects.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__slicer"><code class="highlighter-rouge">fx_slicer</code></a></td>
      <td>Effect: Slicer - chops up audio in the time domain and pipes to different effects.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">class </code><a href="#classfx__variable__delay"><code class="highlighter-rouge">fx_variable_delay</code></a></td>
      <td>Effect: Variable delay - foundational block of flangers and choruses.</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">struct </code><a href="#structAUDIO__ROUTE"><code class="highlighter-rouge">AUDIO_ROUTE</code></a></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">struct </code><a href="#structCTRL__ROUTE"><code class="highlighter-rouge">CTRL_ROUTE</code></a></td>
      <td> </td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">struct </code><a href="#structDSP__STATUS"><code class="highlighter-rouge">DSP_STATUS</code></a></td>
      <td> </td>
    </tr>
  </tbody>
</table>
:ET